# interpreter for shell commands
set shell zsh
#set ignorecase true
#set icons true
set ifs "\n"
set autoquit true

set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id


#set previewer ~/.config/lf/lf_kitty_preview
#set cleaner ~/.config/lf/lf_kitty_clean
## set '-eu' options for shell commands
## These options are used to have safer shell commands. Option '-e' is used to
## exit on error and option '-u' is used to give error for unset variables.
## Option '-f' disables pathname expansion which can be useful when $f, $fs, and
## $fx variables contain names with '*' or '?' characters. However, this option
## is used selectively within individual commands as it can be limiting at
## times.
#set shellopts '-eu'
#
## set internal field separator (IFS) to "\n" for shell commands
## This is useful to automatically split file names in $fs and $fx properly
## since default file separator used in these variables (i.e. 'filesep' option)
## is newline. You need to consider the values of these options and create your
## commands accordingly.
#set ifs "\n"
#
## leave some space at the top and the bottom of the screen
#set scrolloff 10
#
#$lf -remote "send $id set previewer ${XDG_CONFIG_HOME:-$HOME/.config}/lf/scope"
## use enter for shell commands
## map <enter> shell
#set period 1
## execute current file (must be executable)
#map x $$f
#map X !$f
#
## dedicated keys for file opener actions
map o !mimeopen $f
map O $mimeopen --ask $f
#
##Custom mappings
#map <c-z> $ kill -STOP $PPID
#map <c-y> up
#map <c-e> down
#map DD delete
#map V mkfile
#map D mkdir
#map br bulk-rename 
#   # Movement
#map gD cd ~/documents
#map gd cd ~/downloads
#map gp cd ~/pictures
#map gc cd ~/.config
#map gr cd ~/repos
#map gv cd ~/videos/recordings
#map gs cd ~/.local/bin
#map <a-n> newfold
#
#cmd newfold ${{
#    set -f
#    read newd
#    mkdir -- "$newd"
#    mv -- $fx "$newd"
#}}
#
## Custom Functions
#cmd mkdir ${{
#  printf "Directory Name: "
#  read ans
#  mkdir $ans
#}}
#
#cmd mkfile ${{
#  printf "File Name: "
#  read ans
#  $EDITOR $ans
#}}
#
#cmd setwallpaper ${{
#./change $f
#}}
#
#cmd bulk-rename ${{
#    old="$(mktemp)"
#    new="$(mktemp)"
#    [ -n "$fs" ] && fs="$(ls)"
#    printf '%s\n' "$fs" >"$old"
#    printf '%s\n' "$fs" >"$new"
#    $EDITOR "$new"
#    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
#    paste "$old" "$new" | while IFS= read -r names; do
#        src="$(printf '%s' "$names" | cut -f1)"
#        dst="$(printf '%s' "$names" | cut -f2)"
#        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
#            continue
#        fi
#        mv -- "$src" "$dst"
#    done
#    rm -- "$old" "$new"
#    lf -remote "send $id unselect"
#}}
#
#
#
## define a custom 'open' command
## This command is called when current file is not a directory. You may want to
## use either file extensions and/or mime types here. Below uses an editor for
## text files and a file opener for the rest.
## default
##cmd open ${{
##    test -L $f && f=$(readlink -f $f)
##    case $(file --mime-type $f -b) in
##        text/*) vim $fx;;
##        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
##    esac
##}}
##lukes
#cmd open ${{
#    case $(file --mime-type "$(readlink -f $f)" -b) in image/vnd.djvu|application/pdf|application/octet-stream|application/postscript) setsid -f zathura $fx >/dev/null 2>&1 ;;
#        text/*) $EDITOR $fx;;
#	image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
#	image/svg+xml) display -- $f ;;
#	image/*) nsxiv  $fx;;
#	audio/*) mpv --audio-display=no $f ;;
#	video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
#	application/pdf|application/vnd*|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
#	application/pgp-encrypted) $EDITOR $fx ;;
#        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
#    esac
#}}
cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) onlyoffice $fx ;;
	image/vnd.djvu|application/pdf|application/octet-stream|application/postscript) setsid -f zathura $fx >/dev/null 2>&1 ;;
        text/*|application/json|inode/x-empty) $EDITOR $fx;;
	image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
	image/svg+xml) display -- $f ;;
# 	image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" |
#		setsid -f nsxiv -aio 2>/dev/null | while read -r file; do
#			[ -z "$file" ] && continue
#			lf -remote "send select \"$file\""
#			lf -remote "send toggle"
#		done &
#		;;
 	image/*) echo "nsxiv  $fx" | zsh;;
 	  #image/*) nsxiv  $fx;;
	audio/*) mpv --audio-display=no $f ;;
	video/*|application/vnd.rn-realmedia) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
	application/pdf|application/vnd.djvu|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
	application/pgp-encrypted) $EDITOR $fx ;;
	application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/vnd.oasis.opendocument.text) setsid -f lowriter $fx >/dev/null 2>&1 ;;
	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/octet-stream|application/vnd.oasis.opendocument.spreadsheet|application/vnd.oasis.opendocument.spreadsheet-template) setsid -f localc $fx >/dev/null 2>&1 ;;
	application/vnd.openxmlformats-officedocument.presentationml.presentation|application/vnd.oasis.opendocument.presentation-template|application/vnd.oasis.opendocument.presentation|application/vnd.ms-powerpoint) setsid -f loimpress $fx >/dev/null 2>&1 ;;
	application/vnd.oasis.opendocument.graphics|application/vnd.oasis.opendocument.graphics-template) setsid -f lodraw $fx >/dev/null 2>&1 ;;
	application/vnd.oasis.opendocument.formula) setsid -f lomath $fx >/dev/null 2>&1 ;;
	application/vnd.oasis.opendocument.database) setsid -f lobase $fx >/dev/null 2>&1 ;;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}



## define a custom 'rename' command without prompt for overwrite
## cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
## map r push :rename<space>
#
## make sure trash folder exists
## %mkdir -p ~/.trash
#
## move current file or selected files to trash folder
## (also see 'man mv' for backup/overwrite options)
#cmd trash %set -f; mv $fx ~/.trash
#
## define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}
#
## use '<delete>' key for either 'trash' or 'delete' command
## map <delete> trash
## map <delete> delete
#
## extract the current file with the right command
## (xkcd link: https://xkcd.com/1168/)
#cmd extract ${{
#    set -f
#    case $f in
#        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
#        *.tar.gz|*.tgz) tar xzvf $f;;
#        *.tar.xz|*.txz) tar xJvf $f;;
#        *.zip) unzip $f;;
#        *.rar) unrar x $f;;
#        *.7z) 7z x $f;;
#    esac
#}}
#
## compress current file or selected files with tar and gunzip
#cmd tar ${{
#    set -f
#    mkdir $1
#    cp -r $fx $1
#    tar czf $1.tar.gz $1
#    rm -rf $1
#}}
#
## compress current file or selected files with zip
#cmd zip ${{
#    set -f
#    mkdir $1
#    cp -r $fx $1
#    zip -r $1.zip $1
#    rm -rf $1
#}}
#
##set previewer stpv
##set cleaner stpvimgclr
##&stpvimg --listen $id
##set cleaner ~/.config/lf/clear_img.sh
##set previewer ~/.config/lf/previewer.sh
#set cleaner '~/.config/lf/cleaner'
#set previewer '~/.config/lf/scope'
#&ctpv -s $id
#&ctpvquit $id

cmd bulkrename $vidir

map <enter> open
map . set hidden!
map A rename # at the very end
map I push A<c-a> # at the very beginning
map i push A<a-b><a-b><a-f> # before extension
map B bulkrename
map DD delete
map V push :!nvim<space>
map <c-n> push $mkdir<space>
map <backspace2> updir
map zp set preview!
